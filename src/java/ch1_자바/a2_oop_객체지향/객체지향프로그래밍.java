package ch1_자바.a2_oop_객체지향;

public class 객체지향프로그래밍 {
    /*
     * 객체지향언어란?
     * - 객체를 중심으로 프로그램이나 시스템을 구성하는 일을 하기 위해 사용하는 언어로써
     * 객체지향 언어를 통해 모든것을 객체화 시킬 수 있음
     * 장점 : 코드의 재사용성, 코드의 관리 용이, 높은 신뢰성
     *
     *
     * OOP(Object Oriented Programming)
     * 1. 클래스
     * - 객체를 만들어 내기 위한 틀(Frame)
     * 2. 객체(Object, 논리적 = 인스턴스(instant))
     * - 클래스를 통해서 만들어진 '구현물' (구체화 되어진 물질, 지칭할 수 있는 모든 것) Car 코나, Car k5 ...
     * 3. 메소드(Method)
     * - 객체(Class도 포함된 Object)의 기능
     * - 메소드 블록[] 내의 마지막 문장까지 수행 못해도 return문을 만나면 메소드 종료
     * 4. 생성자(Constructor)
     * - 객체가 생성될 때 반드시 수행되어야 하는 일(기능)
     * 5. 속성(Field == 멤버변수)
     * - 객체의 '특성(속성)'
     * - 다양한 객체를 표현하기 위해 존재
     *
     * 특징
     * 1. 상속성(Inheritance)
     * - 자식객체가 부모객체의 모든 것(멤버, 메소드) 상속 받는것
     * - 자식객체는 오직 1개의 부모클래스를 가질 수 있음
     * - 모든 클래스는 Object의 자식
     * - Object 클래스(최상위 부모 클래스)는 총 11개의 메소드가 있다
     * (import java.lang.* -> 묵시적 상속)
     * - 모든 생성자의 첫 라인에 'super()' 생략
     * (단, 부모 클래스의 부모생성자가 default를 호출할 경우)
     * - 오버라이딩의 전제 조건
     * - 자식객체를 부모 객체로 형변환 가능(=대입연산 가능) :자동형변환(Implicit Typecasting)
     *
     * 2. 다형성(Polymorphism)
     * - 같은 타입 객체의 같은 메소드가 다양한 기능을 하는 것
     *
     * 3. 은닉성(Information Hiding)
     * - 외부프로그램(클래스)으로부터 정보(속성값, 데이터)를 감추는 것
     *
     * 4. 캡슐화(Encapsulation)
     * - 메소드가 생성자의 내용을 몰라도 '이름, 파라미터, 리턴타입'만 알면 호출하여 사용가능함
     *
     *
     * 절차지향 프로그래밍 (C언어) / 순차적인 처리
     * - 장점 : 컴퓨터의 처리구조와 유사해 실행속도가 빠름
     * - 단점 : 유지보수 어려움, 실행 순서가 정해져 있으므로 코드순서가 바뀌면 동일한 결과를 보장하기 어려움, 디버깅 어려움
     *
     * 객체지향 프로그래밍 (JAVA)
     * - 캡슐화 : 데이터를 감추고 외부세계와 상호작용은 메소드를 통하는 방법
     * - 상속 : 이미 작성된 클래스를 이어 받아서 새로운 클래스를 생성하는 기법으로 위해서 말한 기존 코드를 재활용하여 사용
     * - 다형성 : 하나의 이름(방법)으로 많은 상황에 대처하는 기법
     *
     * - 장점 : 신뢰성 있는 소프트웨어를 쉽게 작성, 코드 재사용 쉬움, 업그레이드 쉬움, 디버깅 쉬움
     * - 단점 : 처리속도가 절챠지향보다 느림, 설계에 많은 시간 소요가 들어감
     *
     * 절차지향 : 데이터 중심 함수 구현
     * 객체지향 : 기능을 중심으로 메서드 구현
     *
     * 라이브러리(도서관) 모듈(구성단위) 개발에선 같은 의미이다.
     * 재사용이 가능한 코드의 집합
     *
     * 프레임워크
     * */
}
