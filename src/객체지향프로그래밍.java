public class 객체지향프로그래밍 {
    /*
     * 절차지향 프로그래밍 (C언어) / 순차적인 처리
     * - 장점 : 컴퓨터의 처리구조와 유사해 실행속도가 빠름
     * - 단점 : 유지보수 어려움, 실행 순서가 정해져 있으므로 코드순서가 바뀌면 동일한 결과를 보장하기 어려움, 디버깅 어려움
     *
     * 객체지향 프로그래밍 (JAVA)
     * - 캡슐화 : 데이터를 감추고 외부세계와 상호작용은 메소드를 통하는 방법
     * - 상속 : 이미 작성된 클래스를 이어 받아서 새로운 클래스를 생성하는 기법으로 위해서 말한 기존 코드를 재활용하여 사용
     * - 다형성 : 하나의 이름(방법)으로 많은 상황에 대처하는 기법
     *
     * - 장점 : 신뢰성 있는 소프트웨어를 쉽게 작성, 코드 재사용 쉬움, 업그레이드 쉬움, 디버깅 쉬움
     * - 단점 : 처리속도가 절챠지향보다 느림, 설계에 많은 시간 소요가 들어감
     *
     * 절차지향 : 데이터 중심 함수 구현
     * 객체지향 : 기능을 중심으로 메서드 구현
     *
     * 라이브러리(도서관) 모듈(구성단위) 개발에선 같은 의미이다.
     * 재사용이 가능한 코드의 집합
     *
     * 프레임워크
     * */
}
